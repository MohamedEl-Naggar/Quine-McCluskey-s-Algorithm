#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <algorithm>
#include <vector>
#include <cmath>
using namespace std;

vector<string> minterms;
vector<string> dc;
vector<string> pi;

string dec_to_bin(int bits, int num)
{
	string bin;
	int arr[16];
	int i;
	for (i = 0; i < bits; i++)
	{
		arr[i] = num % 2;
		num /= 2;
	}
	for (i = i - 1; i >= 0; i--)
	{
		bin += to_string(arr[i]);
	}
	return bin;
}

void read(string name)
{
	char new_line = '\n';
	int t;
	ifstream open(name);
	if (!open.is_open())
	{
		cout << "Error while openning file" << '\n';
		return;
	}
	int no_bits;
	string s;
	open >> no_bits;
	if (no_bits > 16 || no_bits <= 0)
	{
		cout << "Invalid input, number of variables must be bigger than 0 and less than 16" << endl;
		return;
	}
	open.ignore();
	getline(open, s);
	open.seekg(2);
	for(int i=0; i<=s.length()/2; i++)
	{
		open >> t;
		if (t >= pow(2,no_bits)||t<0)
		{
			cout << "invalid input, minterms must be positive and less than the number of variables" << endl;
			return;
		}
			minterms.push_back(dec_to_bin(no_bits, t));
		pi.push_back(dec_to_bin(no_bits, t));
		open.ignore();
	}
	while (!open.eof())
	{
		open >> t;
		for(int i =0; i < minterms.size(); i++)
			if (dec_to_bin(no_bits, t) == minterms[i])
			{
				cout << "Error, there is a dont care value which is equal to one of the minterms" << endl;
				return;
			}
		dc.push_back(dec_to_bin(no_bits, t));
		pi.push_back(dec_to_bin(no_bits, t));
		open.ignore();
	}
	for (int i = 0; i < pi.size(); i++)
		cout << pi[i] << endl;
}

bool one_diff(string a, string b)
{
	int flag = 0;
	for (int i = 0; i < a.length(); i++)
		if (a[i] != b[i])
			flag++;
	if (flag == 1)
		return 1;
	else
		return 0;
}

void insert_dash(string a, string b)
{

	for (int i = 0; i < a.length(); i++)
		if (a[i] != b[i])
		{
			a.replace(i, 1, "-");
		}
	pi.push_back(a);

}

void find_pi()
{
	int size = pi.size();
	cout << "size; " << pi.size() << endl;
	for (int i = 0; i<pi.size(); i++)
		for (int j = i + 1; j <pi.size(); j++)
			if (one_diff(pi[i], pi[j]))
			{
				insert_dash(pi[i], pi[j]);
				cout << pi.size() << endl;
			}
}


void main()
{
	read("Test.txt");
	find_pi();
	system("pause");
}
