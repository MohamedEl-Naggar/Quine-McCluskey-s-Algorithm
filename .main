#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <vector>
#include <cmath>
using namespace std;

struct prime_implicants
{
	string str;
	vector<int> covers;
};

vector<prime_implicants> pi;
vector<string> minterms;
vector<string> dc;
vector<prime_implicants> temp;
vector<int> to_be_removed;
vector<int> mint;
vector<int> dontcares;
vector<prime_implicants> ess;

string dec_to_bin(int bits, int num)
{
	string bin;
	int arr[16];
	int i;
	for (i = 0; i < bits; i++)
	{
		arr[i] = num % 2;
		num /= 2;
	}
	for (i = i - 1; i >= 0; i--)
	{
		bin += to_string(arr[i]);
	}
	return bin;
}

void read(string name)
{
	char temp;
	int t;
	ifstream open(name);
	if (!open.is_open())
	{
		cout << "Error while openning file" << '\n';
		return;
	}
	int no_bits;
	string s;
	open >> no_bits;
	if (no_bits > 16 || no_bits <= 0)
	{
		cout << "Invalid input, number of variables must be bigger than 0 and less than 16" << endl;
		return;
	}
	open.ignore();
	getline(open, s);
	open.seekg(3);
	cout << "sdsaf" << open.peek() << endl;

	while(open.peek() != '\n')
	{
		if (open.peek() == ',')
			open.ignore();
		else
		{
			open >> t;
			if (t >= pow(2, no_bits) || t < 0)
			{
				cout << "invalid input, minterms must be positive and less than the number of variables" << endl;
				return;
			}
			minterms.push_back(dec_to_bin(no_bits, t));
			prime_implicants p;
			p.str = dec_to_bin(no_bits, t);
			p.covers.push_back(t);
			mint.push_back(t);
			pi.push_back(p);
		}
	}
	open.ignore();
	while (!open.eof())
	{
		open >> t;
		for (int i = 0; i < minterms.size(); i++)
			if (dec_to_bin(no_bits, t) == minterms[i])
			{
				cout << "Error, there is a dont care value which is equal to one of the minterms" << endl;
				return;
			}
		dc.push_back(dec_to_bin(no_bits, t));
		prime_implicants p;
		p.str = dec_to_bin(no_bits, t);
		p.covers.push_back(t);
		dontcares.push_back(t);
		pi.push_back(p);
		open.ignore();
	}
	for (int i = 0; i < pi.size(); i++)
		cout << pi[i].str << endl;
	for (int i = 0; i<dontcares.size(); i++)
		cout << "dcsssscc: " << dontcares[i] << endl;
	for(int i=0;i<mint.size(); i++)
		cout << "mintermmsss: " << mint[i] << endl;
}

bool one_diff(string a, string b)
{
	int flag = 0;
	for (int i = 0; i < a.length(); i++)
		if (a[i] != b[i])
			flag++;
	if (flag == 1)
		return 1;
	else
		return 0;
}

void insert_dash(prime_implicants a, prime_implicants b)
{
	int flag = 0;
	for (int i = 0; i < a.str.length(); i++)
		if (a.str[i] != b.str[i])
			a.str.replace(i, 1, "-");
	for (int i = 0; i < temp.size(); i++)
		if (a.str == temp[i].str)
			flag++;
	if (flag == 0)
	{
		for (int i = 0; i < b.covers.size(); i++)
			a.covers.push_back(b.covers[i]);
		temp.push_back(a);

	}

}

bool not_inside(int x)
{
	for (int i = 0; i < to_be_removed.size(); i++)
		if (x == to_be_removed[i])
			return 0;
	return 1;
}

bool inside(string x)
{
	for (int i = 0; i < ess.size(); i++)
		if (x == ess[i].str)
			return 1;
	return 0;
}

void find_pi()
{
	int size = pi.size();
	int flag = 1;
	while (flag)
	{	
		flag = 0;
		for (int i = 0; i < pi.size(); i++)
			for (int j = i + 1; j < pi.size(); j++)
				if (one_diff(pi[i].str, pi[j].str))
				{
					flag = 1;
					insert_dash(pi[i], pi[j]);
					if(not_inside(i))
						to_be_removed.push_back(i);
					if (not_inside(j))
						to_be_removed.push_back(j);
				}
		if (flag == 1)
		{
			sort(to_be_removed.begin(), to_be_removed.end());
			for (int i = to_be_removed.size() - 1; i >= 0; i--)
			{
				pi.erase(pi.begin() + to_be_removed[i]);
				cout << "value of indexes to be removed: " << to_be_removed[i] << endl;
			}
			for (int i = 0; i < temp.size(); i++)
				pi.push_back(temp[i]);
			for (int i = 0; i < pi.size(); i++)
			{
				cout << "Prime Imp: " << pi[i].str << " Covers these minterms and dont cares: ";
				for (int j = 0; j < pi[i].covers.size(); j++)
					cout << pi[i].covers[j]<< ", ";
				cout << endl;
			}
			to_be_removed.clear();
			temp.clear();
		}
	}
}

bool inside_num(int x, vector<int> n)
{
	for (int i = 0; i < n.size(); i++)
		if (x == n[i])
			return 1;
	return 0;
}

bool check_essentials(int num)
{
	int counter = 0;
	for (int i = 0; i < pi.size(); i++)
		for (int j = 0; j < pi[i].covers.size(); j++)
			if (num == pi[i].covers[j])
				counter++;
	if (counter == 1)
		return 1;
	return 0;
}

void find_essentials()
{
	for (int i = 0; i < pi.size(); i++)
		for (int j = 0; j < pi[i].covers.size(); j++)
			if ((check_essentials(pi[i].covers[j])) && (inside_num(pi[i].covers[j], mint))&&(!inside(pi[i].str)))
				ess.push_back(pi[i]);
	for (int i = 0; i < ess.size(); i++)
		cout << "essentials: " << ess[i].str << endl;		
	to_be_removed.clear();
	for (int i = 0; i < ess.size(); i++)
		for (int j = 0; j < ess[i].covers.size(); j++)
			if (!inside_num(ess[i].covers[j], to_be_removed))
				to_be_removed.push_back(ess[i].covers[j]);
	cout << "These minterms are not covered by essentials: ";
	for (int i = 0; i < mint.size(); i++)
		if (!inside_num(mint[i], to_be_removed))
			cout << mint[i] << ", ";
}

void main()
{
	read("Test.txt");
	find_pi();
	find_essentials();
	system("pause");
}
